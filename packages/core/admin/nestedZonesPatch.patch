diff --git a/admin/src/content-manager/components/DynamicZone/components/DynamicComponent.js b/admin/src/content-manager/components/DynamicZone/components/DynamicComponent.js
index 51542763eb..575e218fae 100644
--- a/admin/src/content-manager/components/DynamicZone/components/DynamicComponent.js
+++ b/admin/src/content-manager/components/DynamicZone/components/DynamicComponent.js
@@ -83,7 +83,7 @@ const DynamicZoneComponent = ({
   onDropItem,
   onCancel,
 }) => {
-  const [isOpen, setIsOpen] = useState(true);
+  const [isOpen, setIsOpen] = useState(name.includes('.') ? false : true);
   const { formatMessage } = useIntl();
   const { getComponentLayout } = useContentTypeLayout();
   const { modifiedData } = useCMEditViewDataManager();
diff --git a/admin/src/content-manager/components/DynamicZone/index.js b/admin/src/content-manager/components/DynamicZone/index.js
index 69701a1a9c..3808c2def3 100644
--- a/admin/src/content-manager/components/DynamicZone/index.js
+++ b/admin/src/content-manager/components/DynamicZone/index.js
@@ -1,3 +1,4 @@
+/* eslint-disable import/no-cycle */
 import React, { memo, useMemo, useState } from 'react';
 import get from 'lodash/get';
 import isEqual from 'react-fast-compare';
diff --git a/admin/src/content-manager/components/DynamicZone/utils/select.js b/admin/src/content-manager/components/DynamicZone/utils/select.js
index b30f7597be..874ae18ea4 100644
--- a/admin/src/content-manager/components/DynamicZone/utils/select.js
+++ b/admin/src/content-manager/components/DynamicZone/utils/select.js
@@ -14,28 +14,38 @@ function useSelect(name) {
     readActionAllowedFields,
     updateActionAllowedFields,
   } = useCMEditViewDataManager();
-
-  const dynamicDisplayedComponents = useMemo(
-    () =>
-      get(modifiedData, [name], []).map((data) => {
-        return {
-          componentUid: data.__component,
-          id: data.id ?? data.__temp_key__,
-        };
-      }),
-    [modifiedData, name]
-  );
-
+  console.log("modifiedData", modifiedData, name);
+
+
+  const dynamicDisplayedComponents = useMemo(() => {
+    // const parsedName = name.split('.').reduce((name, part) => {
+
+    // }, );
+     console.log("mod data and p name", name);
+    return get(modifiedData, name, []).map(data => {
+      return {
+        componentUid: data.__component,
+        id: data.id ?? data.__temp_key__,
+      };
+    });
+  }, [modifiedData, name]);
+  const contains = (items, name) => {
+    if (Array.isArray(name)) {
+      return items.includes(name[0]);
+    }
+
+    return items.includes(name);
+  };
   const isFieldAllowed = useMemo(() => {
     const allowedFields = isCreatingEntry ? createActionAllowedFields : updateActionAllowedFields;
 
-    return allowedFields.includes(name);
+    return contains(allowedFields, name.split('.'));
   }, [name, isCreatingEntry, createActionAllowedFields, updateActionAllowedFields]);
 
   const isFieldReadable = useMemo(() => {
     const allowedFields = isCreatingEntry ? [] : readActionAllowedFields;
 
-    return allowedFields.includes(name);
+    return contains(allowedFields, name.split('.'));
   }, [name, isCreatingEntry, readActionAllowedFields]);
 
   return {
diff --git a/admin/src/content-manager/components/EditViewDataManagerProvider/reducer.js b/admin/src/content-manager/components/EditViewDataManagerProvider/reducer.js
index ffc0670e1d..7311bc3a17 100644
--- a/admin/src/content-manager/components/EditViewDataManagerProvider/reducer.js
+++ b/admin/src/content-manager/components/EditViewDataManagerProvider/reducer.js
@@ -105,12 +105,12 @@ const reducer = (state, action) =>
 
         const repeatableFields = recursivelyFindPathsBasedOnCondition(
           allComponents,
-          (value) => value.type === 'component' && value.repeatable
+          (value) => (value.type === 'component' && value.repeatable) || value.type === 'dynamiczone'
         )(componentLayoutData.attributes);
 
         const nonRepeatableComponentPaths = recursivelyFindPathsBasedOnCondition(
           allComponents,
-          (value) => value.type === 'component' && !value.repeatable
+          (value) => value.type === 'component' && !value.repeatable || value.type === 'dynamiczone'
         )(componentLayoutData.attributes);
 
         const componentDataStructure = relationPaths.reduce((acc, current) => {
@@ -350,12 +350,13 @@ const reducer = (state, action) =>
           draftState.shouldCheckErrors = !state.shouldCheckErrors;
         }
 
-        const currentValue = state.modifiedData[dynamicZoneName];
+        const componentPathToMove = ['modifiedData', ...dynamicZoneName.split('.')].join('.');
+        const currentValue = get(draftState, componentPathToMove);
         const nextIndex = action.type === 'MOVE_COMPONENT_UP' ? currentIndex - 1 : currentIndex + 1;
-        const valueToInsert = state.modifiedData[dynamicZoneName][currentIndex];
+        const valueToInsert = currentValue[currentIndex];
         const updatedValue = moveFields(currentValue, currentIndex, nextIndex, valueToInsert);
 
-        set(draftState, ['modifiedData', action.dynamicZoneName], updatedValue);
+        set(draftState, ['modifiedData', ...action.dynamicZoneName.split('.')], updatedValue);
 
         break;
       }
@@ -404,9 +405,10 @@ const reducer = (state, action) =>
         if (action.shouldCheckErrors) {
           draftState.shouldCheckErrors = !state.shouldCheckErrors;
         }
-
-        draftState.modifiedData[action.dynamicZoneName].splice(action.index, 1);
-
+        const componentPathToRemove = ['modifiedData', ...action.dynamicZoneName.split('.')].join(
+          '.'
+        );
+        get(draftState, componentPathToRemove).splice(action.index, 1);
         break;
       }
       case 'REMOVE_COMPONENT_FROM_FIELD': {
diff --git a/admin/src/content-manager/components/NonRepeatableComponent/index.js b/admin/src/content-manager/components/NonRepeatableComponent/index.js
index 3614d1c0e0..c2850d60f1 100644
--- a/admin/src/content-manager/components/NonRepeatableComponent/index.js
+++ b/admin/src/content-manager/components/NonRepeatableComponent/index.js
@@ -7,6 +7,7 @@ import { Box, Grid, GridItem, Stack } from '@strapi/design-system';
 import { useContentTypeLayout } from '../../hooks';
 import FieldComponent from '../FieldComponent';
 import Inputs from '../Inputs';
+import DynamicZone from '../DynamicZone';
 import useLazyComponents from '../../hooks/useLazyComponents';
 
 const NonRepeatableComponent = ({ componentUid, isFromDynamicZone, isNested, name }) => {
@@ -35,6 +36,7 @@ const NonRepeatableComponent = ({ componentUid, isFromDynamicZone, isNested, nam
             <Grid gap={4} key={key}>
               {fieldRow.map(({ name: fieldName, size, metadatas, fieldSchema, queryInfos }) => {
                 const isComponent = fieldSchema.type === 'component';
+                const isDynamicZone = fieldSchema.type === 'dynamiczone';
                 const keys = `${name}.${fieldName}`;
 
                 if (isComponent) {
@@ -58,7 +60,14 @@ const NonRepeatableComponent = ({ componentUid, isFromDynamicZone, isNested, nam
                     </GridItem>
                   );
                 }
-
+                if (isDynamicZone) {
+                  return (
+                    <GridItem col={size} s={12} xs={12} key={name}>
+                      <DynamicZone name={keys} fieldSchema={fieldSchema} metadatas={metadatas} />
+                    </GridItem>
+                  );
+                }
+                
                 return (
                   <GridItem col={size} key={fieldName} s={12} xs={12}>
                     <Inputs
