diff --cc packages/core/admin/admin/src/content-manager/components/DynamicZone/index.js
index 7e283bdd10,69701a1a9c..0000000000
--- a/packages/core/admin/admin/src/content-manager/components/DynamicZone/index.js
+++ b/packages/core/admin/admin/src/content-manager/components/DynamicZone/index.js
@@@ -1,5 -1,4 +1,5 @@@
 +/* eslint-disable import/no-cycle */
- import React, { memo, useCallback, useMemo, useState, useEffect } from 'react';
+ import React, { memo, useMemo, useState } from 'react';
  import get from 'lodash/get';
  import isEqual from 'react-fast-compare';
  import PropTypes from 'prop-types';
diff --cc packages/core/admin/admin/src/content-manager/components/DynamicZone/utils/select.js
index adc3960267,b30f7597be..0000000000
--- a/packages/core/admin/admin/src/content-manager/components/DynamicZone/utils/select.js
+++ b/packages/core/admin/admin/src/content-manager/components/DynamicZone/utils/select.js
@@@ -15,21 -14,18 +14,28 @@@ function useSelect(name) 
      readActionAllowedFields,
      updateActionAllowedFields,
    } = useCMEditViewDataManager();
 -
 -  const dynamicDisplayedComponents = useMemo(
 -    () =>
 -      get(modifiedData, [name], []).map((data) => {
 -        return {
 -          componentUid: data.__component,
 -          id: data.id ?? data.__temp_key__,
 -        };
 -      }),
 -    [modifiedData, name]
 -  );
 -
++  console.log("modifiedData", modifiedData, name);
 +
-   const dynamicDisplayedComponents = useMemo(() => {
-     const parsedName = Array.isArray(name) ? [name] : name;
 +
-     return get(modifiedData, parsedName, []).map(data => {
-       return data.__component;
++  const dynamicDisplayedComponents = useMemo(() => {
++    // const parsedName = name.split('.').reduce((name, part) => {
++
++    // }, );
++     console.log("mod data and p name", name);
++    return get(modifiedData, name, []).map(data => {
++      return {
++        componentUid: data.__component,
++        id: data.id ?? data.__temp_key__,
++      };
 +    });
 +  }, [modifiedData, name]);
 +  const contains = (items, name) => {
 +    if (Array.isArray(name)) {
 +      return items.includes(name[0]);
 +    }
 +
 +    return items.includes(name);
 +  };
    const isFieldAllowed = useMemo(() => {
      const allowedFields = isCreatingEntry ? createActionAllowedFields : updateActionAllowedFields;
  
diff --cc packages/core/admin/admin/src/content-manager/components/NonRepeatableComponent/index.js
index ba7ab81c86,3614d1c0e0..0000000000
--- a/packages/core/admin/admin/src/content-manager/components/NonRepeatableComponent/index.js
+++ b/packages/core/admin/admin/src/content-manager/components/NonRepeatableComponent/index.js
@@@ -9,7 -7,7 +7,8 @@@ import { Box, Grid, GridItem, Stack } f
  import { useContentTypeLayout } from '../../hooks';
  import FieldComponent from '../FieldComponent';
  import Inputs from '../Inputs';
 +import DynamicZone from '../DynamicZone';
+ import useLazyComponents from '../../hooks/useLazyComponents';
  
  const NonRepeatableComponent = ({ componentUid, isFromDynamicZone, isNested, name }) => {
    const { getComponentLayout } = useContentTypeLayout();
@@@ -59,23 -58,19 +60,26 @@@
                      </GridItem>
                    );
                  }
 -
 +                if (isDynamicZone) {
 +                  return (
 +                    <GridItem col={size} s={12} xs={12} key={name}>
 +                      <DynamicZone name={keys} fieldSchema={fieldSchema} metadatas={metadatas} />
 +                    </GridItem>
 +                  );
 +                }
 +                
- return (
-   <GridItem col={size} key={fieldName} s={12} xs={12}>
-     <Inputs
-       keys={keys}
-       fieldSchema={fieldSchema}
-       metadatas={metadatas}
-       queryInfos={queryInfos}
-     />
-   </GridItem>
+                 return (
+                   <GridItem col={size} key={fieldName} s={12} xs={12}>
+                     <Inputs
+                       componentUid={componentUid}
+                       keys={keys}
+                       fieldSchema={fieldSchema}
+                       metadatas={metadatas}
+                       queryInfos={queryInfos}
+                       size={size}
+                       customFieldInputs={lazyComponentStore}
+                     />
+                   </GridItem>
                  );
                })}
              </Grid>
* Unmerged path packages/core/admin/admin/src/content-manager/components/DynamicZone/components/Component/index.js
diff --git a/packages/core/admin/admin/src/content-manager/components/EditViewDataManagerProvider/reducer.js b/packages/core/admin/admin/src/content-manager/components/EditViewDataManagerProvider/reducer.js
index 25750ce0f0..7311bc3a17 100644
--- a/packages/core/admin/admin/src/content-manager/components/EditViewDataManagerProvider/reducer.js
+++ b/packages/core/admin/admin/src/content-manager/components/EditViewDataManagerProvider/reducer.js
@@ -105,12 +105,12 @@ const reducer = (state, action) =>
 
         const repeatableFields = recursivelyFindPathsBasedOnCondition(
           allComponents,
-          (value) => value.type === 'component' && value.repeatable
+          (value) => (value.type === 'component' && value.repeatable) || value.type === 'dynamiczone'
         )(componentLayoutData.attributes);
 
         const nonRepeatableComponentPaths = recursivelyFindPathsBasedOnCondition(
           allComponents,
-          (value) => value.type === 'component' && !value.repeatable
+          (value) => value.type === 'component' && !value.repeatable || value.type === 'dynamiczone'
         )(componentLayoutData.attributes);
 
         const componentDataStructure = relationPaths.reduce((acc, current) => {
* Unmerged path packages/core/admin/admin/src/content-manager/components/RepeatableComponent/DraggedItem/index.js
